name: Check for New mkbrr Release

on:
  schedule:
    - cron: "0 12 * * 1"  # Runs every Monday at 12:00 UTC
  workflow_dispatch:

jobs:
  check-release:
    runs-on: ubuntu-latest

    steps:
      - name: Get Latest Release Tag
        id: get_release
        run: |
          LATEST_TAG=$(curl -s https://api.github.com/repos/autobrr/mkbrr/releases/latest | jq -r .tag_name)
          echo "Latest mkbrr release: $LATEST_TAG"
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV

      - name: Check if Issue Already Exists
        id: check_issue
        run: |
          ISSUE_EXISTS=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/issues?state=all&labels=mkbrr" | \
          jq -r --arg tag "New mkbrr Release Available! ($LATEST_TAG)" \
          'map(select(.title == $tag)) | length')

          if [[ "$ISSUE_EXISTS" -gt 0 ]]; then
            echo "Issue already exists for release $LATEST_TAG (open or closed)."
          else
            echo "NEW_RELEASE=true" >> $GITHUB_ENV
          fi

      - name: Create GitHub Issue Notification
        if: env.NEW_RELEASE == 'true'
        run: |
          curl -X POST -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          -d '{
            "title": "New mkbrr Release Available!",
            "body": "A new mkbrr release ('$LATEST_TAG') has been detected. Consider running the update workflow.",
            "labels": ["mkbrr", "update"]
          }' \
          "https://api.github.com/repos/${{ github.repository }}/issues"