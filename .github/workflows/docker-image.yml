name: Create and publish Docker images

on:
  release:
    types:
      - published
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      
      - name: Get lowercase repo name
        id: get_lowercase_repo_name
        run: |
          REPO_NAME=${{ env.IMAGE_NAME }} 
          echo "LOWER_CASE_REPO_NAME=${REPO_NAME,,}" >> $GITHUB_ENV

      - name: Get release version or branch name
        id: get_version_or_branch
        run: |
          if [ "${{ github.event_name }}" == "release" ]; then
            RELEASE_VERSION=${{ github.event.release.tag_name }}
            if [ -z "$RELEASE_VERSION" ]; then
              echo "RELEASE_VERSION is empty. Please ensure a release tag is provided."
              exit 1
            fi
            echo "VERSION=${RELEASE_VERSION}" >> $GITHUB_ENV
          elif [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            BRANCH_NAME=${{ github.ref_name }}
            echo "VERSION=${BRANCH_NAME}" >> $GITHUB_ENV
          else
            echo "Unsupported event: ${{ github.event_name }}"
            exit 1
          fi

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.LOWER_CASE_REPO_NAME }}:${{ env.VERSION }}, ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max